package toxoid-component:component;

interface ecs {
    type ecs-entity-t = u64;
    type pointer-t = u64;

    variant relationship {
        is-a,
        child-of,
        custom(ecs-entity-t)
    }
    
    variant phases {
        on-start,
        on-load,
        post-load,
        pre-update,
        on-update,
        on-validate,
        post-update,
        pre-store,
        on-store,
        custom(ecs-entity-t)
    }
    
    enum member-type {
        u8-t,
        u16-t,
        u32-t,
        u64-t,
        i8-t,
        i16-t,
        i32-t,
        i64-t,
        f32-t,
        f64-t,
        bool-t,
        string-t,
        list-t,
        u8list-t,
        u16list-t,
        u32list-t,
        u64list-t,
        i8list-t,
        i16list-t,
        i32list-t,
        i64list-t,
        f32list-t,
        f64list-t,
        pointer-t
    }

    enum event {
        on-set,
        on-add,
        on-remove,
        on-delete,
        on-delete-target,
        on-table-create,
        on-table-delete
    }
    
    record component-desc {
        name: string,
        member-names: list<string>,
        member-types: list<u8>
    }

    record entity-desc {
        name: option<string>,
        add: option<list<ecs-entity-t>>,
        prefab: bool
    }

    record query-desc {
        expr: string
    }

    record sorting-desc {
        id: ecs-entity-t,
        callback: callback
    }

    resource component-type {
        constructor(init: component-desc);
        get-id: func() -> ecs-entity-t;
    }

    record system-desc {
        name: option<string>,
        tick-rate: option<s32>,
        callback: callback,
        query-desc: query-desc,
        is-guest: bool
    }

    record pipeline-desc {
        name: string,
        query-desc: query-desc,
        phases: list<ecs-entity-t>
    }

    record observer-desc {
        name: option<string>,
        query-desc: query-desc,
        events: list<event>,
        callback: callback,
        is-guest: bool
    }

    resource component {
        // This is a component instance so it will need a the entity it belongs to and the component type
        // This is required for observers / events to work
        constructor(ptr: pointer-t, entity: ecs-entity-t, component-type: ecs-entity-t);
        from-ptr: static func(ptr: pointer-t) -> component;
        // TODO: Change this to offset index instead of offset so that WASM guest does not have direct access to host memory.
        set-member-u8: func(offset: u32, value: u8);
        get-member-u8: func(offset: u32) -> u8;
        set-member-u16: func(offset: u32, value: u16);
        get-member-u16: func(offset: u32) -> u16;
        set-member-u32: func(offset: u32, value: u32);
        get-member-u32: func(offset: u32) -> u32;
        set-member-u64: func(offset: u32, value: u64);
        get-member-u64: func(offset: u32) -> u64;
        set-member-i8: func(offset: u32, value: s8);
        get-member-i8: func(offset: u32) -> s8;
        set-member-i16: func(offset: u32, value: s16);
        get-member-i16: func(offset: u32) -> s16;
        set-member-i32: func(offset: u32, value: s32);
        get-member-i32: func(offset: u32) -> s32;
        set-member-i64: func(offset: u32, value: s64);
        get-member-i64: func(offset: u32) -> s64;
        set-member-f32: func(offset: u32, value: f32);
        get-member-f32: func(offset: u32) -> f32;
        set-member-f64: func(offset: u32, value: f64);
        get-member-f64: func(offset: u32) -> f64;
        set-member-bool: func(offset: u32, value: bool);
        get-member-bool: func(offset: u32) -> bool;
        set-member-string: func(offset: u32, value: string);
        get-member-string: func(offset: u32) -> string;
        set-member-u8list: func(offset: u32, value: list<u8>);
        get-member-u8list: func(offset: u32) -> list<u8>;
        set-member-u16list: func(offset: u32, value: list<u16>);
        get-member-u16list: func(offset: u32) -> list<u16>;
        set-member-u32list: func(offset: u32, value: list<u32>);
        get-member-u32list: func(offset: u32) -> list<u32>;
        set-member-u64list: func(offset: u32, value: list<u64>);
        get-member-u64list: func(offset: u32) -> list<u64>;
        set-member-i8list: func(offset: u32, value: list<s8>);
        get-member-i8list: func(offset: u32) -> list<s8>;
        set-member-i16list: func(offset: u32, value: list<s16>);
        get-member-i16list: func(offset: u32) -> list<s16>;
        set-member-i32list: func(offset: u32, value: list<s32>);
        get-member-i32list: func(offset: u32) -> list<s32>;
        set-member-i64list: func(offset: u32, value: list<s64>);
        get-member-i64list: func(offset: u32) -> list<s64>;
        set-member-f32list: func(offset: u32, value: list<f32>);
        get-member-f32list: func(offset: u32) -> list<f32>;
        set-member-f64list: func(offset: u32, value: list<f64>);
        get-member-f64list: func(offset: u32) -> list<f64>;
        set-member-pointer: func(offset: u32, value: u64);
        get-member-pointer: func(offset: u32) -> u64;
    }
    
    resource entity {
        constructor(init: entity-desc, inherits: option<ecs-entity-t>);
        from-id: static func(id: u64) -> entity;
        get-id: func() -> ecs-entity-t;
        get-name: func() -> string;
        set-name: func(name: string);
        get: func(component: ecs-entity-t) -> component;
        add: func(component: ecs-entity-t);
        has: func(component: ecs-entity-t) -> bool;
        remove: func(component: ecs-entity-t);
        add-relationship: func(relationship: relationship, target: ecs-entity-t);
        remove-relationship: func(relationship: relationship, target: ecs-entity-t);
        parent-of: func(target: ecs-entity-t);
        child-of: func(target: ecs-entity-t);
        parent: func() -> entity;
        children: func() -> list<entity>;
        relationship-entities: func(relationship: relationship) -> list<entity>;
        disable: func();
        enable: func();
    }

    resource query {
        constructor(desc: query-desc);
        build: func();
        order-by: func(sorting: sorting-desc);
        iter: func() -> iter;
        next: func() -> bool;
        count: func() -> s32;
        entities: func() -> list<entity>;
        components: func(index: s8) -> list<pointer-t>;
    }

    resource iter {
        constructor(ptr: u64);
        next: func() -> bool;
        count: func() -> s32;
        entities: func() -> list<entity>;
        components: func(index: s8) -> list<pointer-t>;
    }

    resource callback {
        constructor(handle: u64);
        run: func(iter: iter);
        // This is prefixed because resources already have a `handle` method.
        cb-handle: func() -> pointer-t;
    }

    resource system {
        constructor(desc: system-desc);
        get-id: func() -> ecs-entity-t;
        build: func();
        named: func(name: string);
        order-by: func(sorting: sorting-desc);
        callback: func() -> callback;
        disable: func();
        enable: func();
    }
    
    resource phase {
        constructor(name: string);
        depends-on: func(phase: phases);
        get-id: func() -> ecs-entity-t;
    }

    resource pipeline {
        constructor(desc: pipeline-desc);
        build: func();
        add-phase: func(phase: ecs-entity-t);
        get-id: func() -> ecs-entity-t;
        disable: func();
        enable: func();
    }

    resource observer {
        constructor(desc: observer-desc);
        build: func();
        callback: func() -> callback;
    }

    add-singleton: func(component: ecs-entity-t);
    get-singleton: func(component: ecs-entity-t) -> component;
    remove-singleton: func(component: ecs-entity-t);
    add-entity: func(entity: ecs-entity-t);
    remove-entity: func(entity: ecs-entity-t);
    // get-entity: func(entity: ecs-entity-t) -> entity;
    // get-entity-named: func(name: string) -> entity;
    has-entity-named: func(name: string) -> bool;
    get-component-id: func(component-name: string) -> ecs-entity-t;
}

interface callbacks {
    use ecs.{iter};
    run: func(iter: iter, handle: u64);
}

world toxoid-component-world {
    import ecs;
    export init: func();
    export callbacks;
}